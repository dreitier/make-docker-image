CONFIG = default.config
# if this file is not present, it is simply ignored
include $(CONFIG)

# use default shell
SHELL := /bin/bash

AWS_REGION := "eu-central-1"
# find the latest tag for the current commit, even if there are multiple tags for this commit; it is ordered by date
GIT_COMMIT := $(shell git rev-parse --short HEAD)
GIT_TAG := $(shell git for-each-ref --sort=-creatordate --format '%(refname:lstrip=2)' refs/tags --points-at=HEAD --count=1)
# combine both tag and commit and remove whitespaces
IMAGE_TAGS := $(shell echo "$(GIT_COMMIT) $(GIT_TAG)" | xargs)
IMAGE_PATH_PREFIX := $(REPOSITORY)/$(IMAGE_NAME)
.DEFAULT_GOAL := build
CMD_NOT_FOUND = $(error $(1) is required for this rule)
CHECK_CMD = $(if $(shell command -v $(1)),,$(call CMD_NOT_FOUND,$(1)))
ARGS := $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS))
STRIPPED_ARGS := $(strip $(ARGS))
ROOT_DIR := $(shell pwd)
FLAVOR_SUFFIX := $(if $(FLAVOR),-$(FLAVOR),)
DOCKERFILE := $(if $(FLAVOR),Dockerfile.$(FLAVOR),Dockerfile)

check:

ifeq (,$(wildcard $(DOCKERFILE)))
	echo "Dockerfile $(DOCKERFILE) does not exist"
	exit 1
endif

ifeq ($(IMAGE_TAGS),)
	echo "[warn] Missing tag for this commit. Doing a tag commit for $(GIT_TAG) instead."
endif

ifeq ($(REPOSITORY),)
	echo "Missing REPOSITORY parameter"
	exit 1
endif

ifeq ($(IMAGE_NAME),)
	echo "Missing IMAGE_NAME parameter"
	exit 1
endif

$(call CHECK_CMD,aws)

list-git-refs:
	@echo "$(IMAGE_TAGS)"

# make a Git tag for this directory's repository
git-tag: check
	$(if $(STRIPPED_ARGS),,$(error Git tag must provided as first argument be set))
	
	git tag -s -a -m "$(STRIPPED_ARGS)" $(STRIPPED_ARGS)
	@echo "Tagged this commit with $(STRIPPED_ARGS)"

# create a new Git tag and push it to the origin
git-release: git-tag
	git push origin $(STRIPPED_ARGS)
	git push

# revoke an already released tag
git-revoke:
	git tag -d $(STRIPPED_ARGS)
	git push -d origin $(STRIPPED_ARGS)

# build docker image
build: check
	docker build $(BUILD_ARGS) -t $(IMAGE_PATH_PREFIX):$(GIT_COMMIT)$(FLAVOR_SUFFIX) -f $(DOCKERFILE) .

# push to remote AWS location
push-ecr: build
ifeq ($(REGISTRY_AWS_ECR),)
	echo "Missing REGISTRY_AWS_ECR parameter"
	exit 1
endif

	set -e ; \
	echo "Authenticating against $(REGISTRY_AWS_ECR)..." ; \
	aws ecr get-login-password --region $(AWS_REGION) | docker login --username AWS --password-stdin $(REGISTRY_AWS_ECR) ; \
	if [[ $$? -ne 0 ]]; then \
		echo "Unable to login to AWS ECR" ; \
		exit 1 ; \
	fi ; \
	for tag in $(IMAGE_TAGS); do \
		docker tag $(IMAGE_PATH_PREFIX):$(GIT_COMMIT)$(FLAVOR_SUFFIX) $(REGISTRY_AWS_ECR)/$(IMAGE_PATH_PREFIX):$$tag$(FLAVOR_SUFFIX) ; \
		if [[ $$? -ne 0 ]] then \
			echo "Unable to tag image" ; \
			exit 1 ; \
		fi ; \
		docker push $(REGISTRY_AWS_ECR)/$(IMAGE_PATH_PREFIX):$$tag$(FLAVOR_SUFFIX) ; \
		if [[ $$? -ne 0 ]] then \
			echo "Unable to push image" ; \
			exit 1 ; \
		fi ; \
		echo "[success] Pushed $(IMAGE_PATH_PREFIX):$$tag$(FLAVOR_SUFFIX) to remote AWS ECR container registry" ; \
	done \

# push to local registry
push-local: build
ifeq ($(REGISTRY_LOCAL),)
	echo "Missing REGISTRY_LOCAL parameter"
	exit 1
endif

	set -e ; \
	for tag in $(IMAGE_TAGS); do \
		docker tag $(IMAGE_PATH_PREFIX):$(GIT_COMMIT)$(FLAVOR_SUFFIX) $(REGISTRY_LOCAL)/$(IMAGE_PATH_PREFIX):$$tag$(FLAVOR_SUFFIX) ; \
		if [[ $$? -ne 0 ]] then \
			echo "Unable to tag image" ; \
			exit 1 ; \
		fi ; \
		docker push $(REGISTRY_LOCAL)/$(IMAGE_PATH_PREFIX):$$tag$(FLAVOR_SUFFIX) ; \
		if [[ $$? -ne 0 ]] then \
			echo "Unable to push image" ; \
			exit 1 ; \
		fi ; \
		echo "[success] Pushed $(IMAGE_PATH_PREFIX):$$tag$(FLAVOR_SUFFIX) to local container registry" ; \
	done \

push: push-local

clean:

	@for tag in "$(IMAGE_TAGS)" ; do \
		docker rmi $(IMAGE_PATH_PREFIX):$$tag$(FLAVOR_SUFFIX)
	done

# build the container and runs the image
run: build

	mkdir -p input  ; \
	mkdir -p output

	docker run \
		-it \
		-v $(ROOT_DIR)/input:/input:Z \
		-v $(ROOT_DIR)/output:/output:Z \
		$(DOCKER_ARGS) $(IMAGE_PATH_PREFIX):$(GIT_COMMIT)$(FLAVOR_SUFFIX)

# run interactive command line to inspect container
interactive:
	$(MAKE) DOCKER_ARGS+="$(DOCKER_ARGS) --entrypoint /bin/bash" run

# pass on all variables from Makefile to env
external-run: build push-local .EXPORT_ALL_VARIABLES
	IMAGE_TAG=$(GIT_COMMIT)$(FLAVOR_SUFFIX) $(OPTS) ./run.sh $(ARGS) ;

%::
	@true

